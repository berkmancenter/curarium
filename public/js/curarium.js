// Generated by CoffeeScript 1.7.1
(function() {
  var field_drop, inc_exc, modify_field, printRecord, query_button, read_parsed, record, render_thumbnail, submit_update, traceField, update_controls, visualization_property;

  record = {};
  window.curarium = true;
  window.collection = {};

  window.collection.visualization_controls = function(properties) {
    var options;
    options = [];
    $('form>h3').click(function(e) {
      var t;
      $(this).data('toggle', !$(this).data('toggle'));
      t = $(this).data('toggle');
      if (t) {
        $(this).parent().css('height', 'auto');
        return $(this).css('color', 'gray');
      } else {
        $(this).parent().css('height', 20);
        return $(this).css('color', 'white');
      }
    });
    return void 0;
  };

  window.collection.configure = function() {
    var submited;
    submited = false;
    $('#output .field_wrapper').droppable({
      drop: field_drop
    });
    $('#output .field_wrapper').click(function(e) {
      return console.log($(this).data('path').toString());
    });
    $('#parse').submit(function(e) {
      e.preventDefault();
      $('#parsed').empty();
      try {
        record = JSON.parse($("#json").val());
        $('#parsed').append(printRecord(record));
        $('#parsed dd').draggable({
          helper: "clone"
        });
        $('#parsed dd').attr('title', 'drag me to a field');
        return $('#parsed dt').click(function() {
          return $(this).next('dl').toggle();
        });
      } catch (_error) {
        e = _error;
        return $('#parsed').append('invalid json');
      }
    });
    void 0;
    $('form#add_field').submit(function(e) {
      var close, field_name, new_field, title;
      e.preventDefault();
      field_name = $(this).find('input[name=field_name]').val();
      new_field = $('<div>').attr('class', 'field_wrapper').attr('id', field_name).droppable({
        drop: field_drop
      });
      title = $('<p>').append(field_name);
      $(new_field).append(title);
      close = $('<div>').attr('class', 'close').append('X').click(function(e) {
        return $(this).parent().remove();
      });
      $(new_field).append(close);
      return $("#output form#add_field").before(new_field);
    });
    return $('.new_collection, .edit_collection').submit(function(e) {
      if (!submited) {
        e.preventDefault();
        record = {};
        $('.field_wrapper').each(function() {
          var field, value;
          field = $(this).attr('id');
          value = $(this).data('path');
          return record[field] = value;
        });
        $("#collection_configuration").val(JSON.stringify(record));
        submited = !submited;
        $(this).trigger('submit');
      }
      return void 0;
    });
  };

  window.collection.populate_fields = function(configuration) {
    var close, field, field_name, form, new_field, p, path, title, value, _fn, _i, _len;
    $('#title, #image, #thumbnail').remove();
    for (field in configuration) {
      path = configuration[field];
      field_name = field;
      new_field = $('<div>').attr('class', 'field_wrapper').attr('id', field_name).droppable({
        drop: field_drop
      });
      title = $('<p>').append(field_name);
      $(new_field).append(title);
      close = $('<div>').attr('class', 'close').append('X').click(function(e) {
        return $(this).parent().remove();
      });
      $(new_field).append(close);
      $("#output form#add_field").before(new_field);
      $(new_field).data('path', path);
      form = $('<form>');
      _fn = function(p) {
        var label, option01, option02, part;
        if (p === '*') {
          p = 0;
        }
        if (typeof p === 'string') {
          part = $("<input readonly>").attr('class', 'part').attr('type', 'hidden').attr('value', p);
          label = $("<span>").append(p);
          $(form).append(label);
        } else {
          part = $("<select>").attr('class', 'part').change(function(e) {
            path = [];
            $(new_field).parent().children('select, input').each(function() {
              var val;
              val = $(this).val();
              if (isNaN(val)) {
                return path.push(val);
              } else {
                return path.push(parseInt(val, 10));
              }
            });
            $(new_field).parent().parent().find('.value').html(traceField(record, path));
            return $(new_field).parent().parent().data('path', path);
          });
          option01 = $('<option>').attr('value', p).append(p);
          option02 = $('<option>').attr('value', "*").append("*");
          part.append(option01).append(option02);
        }
        $(form).append(part);
        return $(new_field).data('path', path);
      };
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        p = path[_i];
        _fn(p);
      }
      $(new_field).append(form);
      value = $("<div class='value'>").append(traceField(record, path));
      $(new_field).append(value);
    }
    return void 0;
  };

  field_drop = function(e, d) {
    var field, p, path, value, _fn, _i, _len;
    path = $(d.draggable).data('path');
    $(this).data('path', path);
    field = $('<form>');
    _fn = function(p) {
      var label, option01, option02, part;
      if (typeof p === 'string') {
        part = $("<input readonly>").attr('class', 'part').attr('type', 'hidden').attr('value', p);
        label = $("<span>").append(p);
        $(field).append(label);
      } else {
        part = $("<select>").attr('class', 'part').change(function(e) {
          path = [];
          $(this).parent().children('select, input').each(function() {
            var val;
            val = $(this).val();
            if (isNaN(val)) {
              return path.push(val);
            } else {
              return path.push(parseInt(val, 10));
            }
          });
          $(this).parent().parent().find('.value').html(traceField(record, path));
          return $(this).parent().parent().data('path', path);
        });
        option01 = $('<option>').attr('value', p).append(p);
        option02 = $('<option>').attr('value', "*").append("*");
        part.append(option01).append(option02);
      }
      $(field).append(part);
      return $(this).data('path', path);
    };
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      p = path[_i];
      _fn(p);
    }
    $(this).append(field);
    value = $("<div class='value'>").append(traceField(record, path));
    return $(this).append(value);
  };

  traceField = function(object, path) {
    var current, field, i, _fn, _i, _len;
    if (object[path[0]] != null) {
      current = object[path[0]];
      if (path.length === 1) {
        return current;
      } else {
        if (path[1] === "*") {
          field = [];
          _fn = function(i) {
            var npath;
            npath = path.slice(1);
            npath[0] = current.indexOf(i);
            return field.push(traceField(current, npath));
          };
          for (_i = 0, _len = current.length; _i < _len; _i++) {
            i = current[_i];
            _fn(i);
          }
        } else {
          field = traceField(current, path.slice(1));
        }
        return field;
      }
    } else {
      return null;
    }
  };

  printRecord = function(json, path) {
    var i, item, localpath, title, _fn;
    if (path == null) {
      path = [];
    }
    localpath = path.slice(0);
    if (typeof json === 'object') {
      item = $('<dl>');
      if (Array.isArray(json)) {
        item.attr('class', 'array');
      } else {
        item.attr('class', 'object');
      }
      _fn = function(i) {
        var term;
        term = $('<dt>').append(i + ":");
        item.append(term);
        if (isNaN(i)) {
          localpath.push(i);
        } else {
          localpath.push(parseInt(i));
        }
        item.append(printRecord(json[i], localpath));
        if (typeof json[i] !== 'object') {
          item.append("<br>");
        }
        return localpath = path.slice(0);
      };
      for (i in json) {
        _fn(i);
      }
      return item;
    } else {
      title = localpath.toString();
      item = $('<dd>').data('path', localpath);
      item.append(json);
      return item;
    }
  };

  window.collection.query = {
    length: null,
    type: 'thumbnail',
    property: 'title',
    properties: {},
    include: [],
    exclude: [],
    minimum: 0
  };

  window.collection.query_terms = function() {
    var exclude, include, property, query, term, terms, type, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1;
    query = window.collection.query;
    type = '?type=' + query.type;
    property = "&property=" + query.property;
    include = "";
    exclude = "";
    _ref = query.include;
    _fn = function(term) {
      include = include + "&include[]=" + term;
      return void 0;
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      term = _ref[_i];
      _fn(term);
    }
    _ref1 = query.exclude;
    _fn1 = function(term) {
      exclude = exclude + "&exclude[]=" + term;
      return void 0;
    };
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      term = _ref1[_j];
      _fn1(term);
    }
    terms = type + property + include + exclude;
    return terms;
  };

  window.collection.generate_visualization = function() {
    window.location = window.location.pathname + window.collection.query_terms();
    return void 0;
  };

  window.collection.show = function() {
    update_controls();
    $('#visualization_type').change(function(e) {
      e.preventDefault();
      window.collection.query.type = $(this).val();
      return void 0;
    });
    $('#visualization_property').change(function(e) {
      e.preventDefault();
      window.collection.query.property = $(this).val();
      return void 0;
    });
    $('#generate_visualization').submit(function(e) {
      e.preventDefault();
      window.collection.generate_visualization();
      return void 0;
    });
    $('.property_link').click(function() {
      var property, property_list, query_property_placeholder, query_type_placeholder;
      property_list = $(this).parents('.collection_terms').first().find('.property_list');
      property = $(this).data('property');
      property_list.empty();
      property_list.data('property', property);
      $('.filter').val('');
      query_type_placeholder = window.collection.query.type;
      query_property_placeholder = window.collection.query.property;
      window.collection.query.property = property;
      window.collection.query.type = 'properties';
      $.getJSON(window.location.pathname + window.collection.query_terms(), function(data) {
        var li, value, _i, _len;
        console.log(data);
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          value = data[_i];
          li = $("<li data-value='" + value + "'>" + value + "</li>").click(inc_exc);
          property_list.append(li);
        }
        window.collection.query.type = query_type_placeholder;
        return window.collection.query.property = query_property_placeholder;
      });
      return void 0;
    });
    $('.filter').keyup(function(e) {
      var compare, l;
      compare = $(this).val().toLowerCase();
      l = compare.length;
      if (l > 1) {
        $(this).parents('.collection_terms').first().find('.property_list li').each(function(e) {
          if ($(this).html().toLowerCase().indexOf(compare) > -1) {
            return $(this).show();
          } else {
            return $(this).hide();
          }
        });
      }
      return void 0;
    });
    return void 0;
  };

  update_controls = function() {
    var h, property, _i, _j, _len, _len1, _ref, _ref1;
    h = $('div#query_builder').height();
    $('div#query_builder').height(0);
    $('#visualization_controls').click(function(e) {
      var t;
      e.preventDefault();
      $(this).data('closed', !$(this).data('closed'));
      t = $(this).data('closed') ? h : 0;
      return $('div#query_builder').animate({
        height: t
      }, 500);
    });
    $('#visualization_type').val(window.collection.query.type);
    $('#visualization_property').val(window.collection.query.property);
    _ref = window.collection.query.include;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      $("#query_include").append(visualization_property('include', property));
    }
    _ref1 = window.collection.query.exclude;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      property = _ref1[_j];
      $("#query_exclude").append(visualization_property('exclude', property));
    }
    return void 0;
  };

  inc_exc = function(e) {
    var property, query_string, type, value;
    type = $(this).parents('.collection_terms').first().data('type');
    value = $(this).data('value');
    property = $(this).parent().data('property');
    query_string = property + ":" + value;
    window.collection.query[type].push(query_string);
    $("#query_" + type).append(visualization_property(type, query_string));
    return $.getJSON(window.location.pathname + "/visualizations" + window.collection.query_terms(), function(data) {
      return $('#record_count').val(data.length);
    });
  };

  visualization_property = function(type, string) {
    var remove;
    remove = $("<span class='remove_element'>x</span>").click(function() {
      var remove_index;
      $(this).parent().remove();
      remove_index = window.collection.query[type].indexOf(string);
      return window.collection.query[type].splice(remove_index, 1);
    });
    return $("<span class='query_element'>").append($("<span class='element'>" + string + "</span>")).append(remove);
  };

  query_button = function(value) {
    return $("<span class='query_button'>" + value + "</span>").click(inc_exc);
  };

  window.home = {};

  window.home.dashboard = function() {
    $('#dashboard_nav li a').click(function(e) {
      $('#dashboard_nav li a').css('color', 'white');
      $('.curarium_dashboard').hide();
      $("#" + $(this).data('target')).show();
      return $(this).css('color', 'red');
    });
    return void 0;
  };

  window.record = {};

  window.record.parsed = {};

  window.record.update = function() {
    var add_field, save;
    window.record.parsed = read_parsed();
    save = $("<input type='submit' value='save changes'>");
    $('#parsed_record').append(save);
    save.click(submit_update);
    $('.parsed_value').dblclick(modify_field);
    add_field = $("<input type='submit' value='add'>").click(function() {
      var add, cancel, input, new_field;
      new_field = $("<li class='parsed_value'></li>");
      input = $("<input>");
      add = $("<input type='submit' value='add'>");
      cancel = $("<input type='submit' value='cancel'>");
      new_field.append(input).append(add).append(cancel);
      add.click(function() {
        $(new_field).html($(input).val());
        $(new_field).css('background', 'lightblue');
        $(new_field).bind('dblclick', modify_field);
        return window.record.parsed = read_parsed();
      });
      cancel.click(function() {
        return new_field.remove();
      });
      $(this).before(new_field);
      return void 0;
    });
    $('.parsed_field .parsed_values').append(add_field);
    return void 0;
  };

  submit_update = function() {
    $.ajax({
      type: "PUT",
      url: window.location.href,
      data: {
        record: {
          parsed: window.record.parsed
        }
      },
      success: function(data) {
        return $('.parsed_value').css('background', '#D3D3D3');
      },
      dataType: 'json',
      headers: {
        'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
      }
    });
    return void 0;
  };

  modify_field = function(e) {
    var cancel, change, current, del, field, input;
    field = $(this);
    field.unbind('dblclick');
    current = $(this).html();
    input = $("<input value='" + current + "'>");
    change = $("<input type='submit' value='change'>");
    cancel = $("<input type='submit' value='cancel'>");
    del = $("<input type='submit' value='delete'>");
    field.empty().append(input).append(change).append(cancel).append(del);
    change.click(function() {
      $(field).html($(input).val());
      $(field).css('background', 'lightblue');
      $(field).bind('dblclick', modify_field);
      return window.record.parsed = read_parsed();
    });
    cancel.click(function() {
      $(field).html(current);
      return $(field).bind('dblclick', modify_field);
    });
    del.click(function() {
      $(field).remove();
      return window.record.parsed = read_parsed();
    });
    return void 0;
  };

  read_parsed = function() {
    var parsed;
    parsed = {};
    $('.parsed_field').each(function(i) {
      var key;
      key = $(this).attr('id');
      parsed[key] = [];
      return $(this).find('ul').find('li').each(function(i) {
        parsed[key].push($(this).html());
        return void 0;
      });
    });
    void 0;
    return parsed;
  };

  window.record.display = function(image_url, notes) {
    var canvas_dblclick, canvas_mouseup, crop, get_annotations, layer, main, min_scale, scroll, stage, surrogate;
    main = document.getElementById('main-canvas');
    stage = new Kinetic.Stage({
      container: 'main-canvas',
      height: main.offsetHeight,
      width: main.offsetWidth,
      draggable: true
    });
    surrogate = new Image();
    min_scale = 0;
    surrogate.src = image_url + '?width=10000&height=10000';
    surrogate.onload = function() {
      var h, image, w;
      w = surrogate.width;
      h = surrogate.height;
      min_scale = w / h > main.offsetWidth / main.offsetHeight ? main.offsetWidth / w : main.offsetHeight / h;
      if (min_scale > 1) {
        min_scale = 1;
      }
      stage.setAttrs({
        scale: {
          x: min_scale,
          y: min_scale
        }
      });
      image = new Kinetic.Image({
        image: surrogate,
        width: w,
        height: h,
        x: (main.offsetWidth / min_scale - surrogate.width) / 2,
        y: (main.offsetHeight / min_scale - surrogate.height) / 2
      });
      layer.add(image);
      //stage.draw(); 
      get_annotations(notes);
      return void 0;
    };
    layer = new Kinetic.Layer();
    stage.add(layer);
    stage.draw();
    scroll = function(e) {
      var delta, stage_scale;
      e.preventDefault();
      stage_scale = stage.getAttr('scale').x;
      delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)) / 20;
      if ((stage_scale >= 1 && delta > 0) || (stage_scale <= min_scale && delta < 0)) {
        delta = 0;
      }
      stage.setAttrs({
        scale: {
          x: stage.getAttr('scale').x + delta,
          y: stage.getAttr('scale').y + delta
        }
      });
      stage.setAttrs({
        x: (main.offsetWidth - main.offsetWidth / (min_scale / stage.getAttr('scale').x)) / 2,
        y: (main.offsetHeight - main.offsetHeight / (min_scale / stage.getAttr('scale').y)) / 2
      });
      stage.draw();
      return void 0;
    };
    main.addEventListener('mousewheel', scroll, true);
    main.addEventListener('DOMMouseScroll', scroll, true);
    crop = new Kinetic.Rect({
      fill: 'lightblue',
      opacity: 0.25
    });
   /* canvas_dblclick = function(event) {
      var canvas_x, canvas_y;
      if (event.which === 1) {
        event.preventDefault();
        stage.setAttr('draggable', false);
        canvas_x = (event.clientX - $(this).offset().left) - stage.getAttr('x');
        canvas_y = (event.clientY - $(this).offset().top) - stage.getAttr('y');
        crop.setAttrs({
          x: canvas_x / stage.getAttr('scale').x,
          y: canvas_y / stage.getAttr('scale').y
        });
        layer.add(crop);
        $(this).on('mousemove', function(event) {
          canvas_x = event.clientX - $(this).offset().left - stage.getAttr('x');
          canvas_y = event.clientY - $(this).offset().top - stage.getAttr('y');
          crop.setAttrs({
            width: (canvas_x - crop.getAttr('x') * stage.getAttr('scale').x) / stage.getAttr('scale').x,
            height: (canvas_y - crop.getAttr('y') * stage.getAttr('scale').y) / stage.getAttr('scale').y
          });
          return stage.draw();
        });
      }
      return void 0;
    };
    canvas_mouseup = function(event) {
      var clipping, preview, preview_image, preview_layer;
      if (event.which === 1) {
        stage.setAttr('draggable', true);
        clipping = {
          x: Math.floor(crop.getAttr('x')) - (main.offsetWidth / min_scale - surrogate.width) / 2,
          y: Math.floor(crop.getAttr('y')) - (main.offsetHeight / min_scale - surrogate.height) / 2,
          width: Math.floor(crop.getAttr('width')),
          height: Math.floor(crop.getAttr('height'))
        };
        clipping = {
          x: clipping.width > 0 ? clipping.x : clipping.x + clipping.width,
          y: clipping.height > 0 ? clipping.y : clipping.y + clipping.height,
          width: Math.abs(clipping.width),
          height: Math.abs(clipping.height)
        };
        $(this).unbind('mousemove');
        $("#content_x").val(clipping.x);
        $("#content_y").val(clipping.y);
        $("#content_width").val(clipping.width);
        $("#content_height").val(clipping.height);
        $("#content_url").val(image_url);
        preview = new Kinetic.Stage({
          container: 'preview_window',
          width: clipping.width > clipping.height ? 300 : clipping.width * 300 / clipping.height,
          height: clipping.width > clipping.height ? clipping.height * 300 / clipping.width : 300
        });
        preview_layer = new Kinetic.Layer();
        preview_image = new Kinetic.Image({
          image: surrogate,
          crop: clipping,
          scale: {
            x: preview.getAttr('width') / surrogate.width,
            y: preview.getAttr('height') / surrogate.height
          }
        });
        preview_layer.add(preview_image);
        preview.add(preview_layer);
        crop.destroy();
      }
      return void 0;
    };*/
    
    get_annotations = function(notes) {
        var ID, n, notes_layer, rect, _i, _len;
        notes_layer = new Kinetic.Layer();
        stage.add(notes_layer);
        for (_i = 0, _len = notes.length; _i < _len; _i++) {
          n = notes[_i];
          if (n.content.image_url === image_url) {
            ID = "note_" + n.id;
            rect = new Kinetic.Rect({
              id: ID,
              x: parseInt(n.content.x) + (main.offsetWidth / min_scale - surrogate.width) / 2,
              y: parseInt(n.content.y) + (main.offsetHeight / min_scale - surrogate.height) / 2,
              stroke: 'red',
              strokeWidth: 1,
              width: n.content.width,
              height: n.content.height
            });
            rect.tags = n.content.tags;
            rect.on('mouseover', function() {
              $('#' + this.getAttr('id')).css({
                background: 'red'
              });
              return void 0;
            });
            rect.on('mouseout', function() {
              $('#' + this.getAttr('id')).css({
                background: '#C3C3C3'
              });
              return void 0;
            });
            $('.parsed_value').mouseover(function() {
              var note, tag, _j, _len1;
              $(this).css('background-color', 'green');
              notes = notes_layer.getChildren();
              tag = $(this).html();
              for (_j = 0, _len1 = notes.length; _j < _len1; _j++) {
                note = notes[_j];
                if (note.tags && note.tags.indexOf(tag) > -1) {
                  note.setAttrs({
                    stroke: 'green',
                    strokeWidth: 3
                  });
                  note.draw();
                }
              }
              return void 0;
            });
            $('.parsed_value').mouseout(function() {
              var note, _j, _len1;
              $(this).css('background-color', 'lightgray');
              notes = notes_layer.getChildren();
              for (_j = 0, _len1 = notes.length; _j < _len1; _j++) {
                note = notes[_j];
                note.setAttrs({
                  stroke: 'red',
                  strokeWidth: 1
                });
              }
              notes_layer.draw();
              return void 0;
            });
            $("#" + ID).mouseover(function() {
              var note;
              note = notes_layer.find('#' + $(this).attr('id'));
              note.setAttrs({
                stroke: 'green',
                strokeWidth: 4
              });
              notes_layer.draw();
              return void 0;
            });
            $("#" + ID).mouseout(function() {
              var note;
              note = notes_layer.find('#' + $(this).attr('id'));
              note.setAttrs({
                stroke: 'red',
                strokeWidth: 1
              });
              notes_layer.draw();
              return void 0;
            });
            notes_layer.add(rect);
          }
        }
        $('#annotation_toggle').change(function() {
          notes_layer.setAttr('visible', $(this).prop('checked'));
          return void 0;
        });
        return stage.draw();
      };
    
    //$('#main-canvas').on('dblclick', canvas_dblclick);
    //$('#main-canvas').on('mouseup', canvas_mouseup);
    
    $('.tag_selector').change(function() {
      var div;
      div = $("<input type='text'class='annotation_tag' readonly='readonly' name='annotation[content][tags][]'>").val($(this).val());
      $(this).before(div);
      return void 0;
    });
    
    $('.edit_clipping').click(function() {
      var current_note, id, notes_layer, rect;
      current_note = $(this).parent();
      id = $(this).parent().attr('id');
      rect = stage.find("#" + id);
      stage.setAttr('draggable', false);
      $('#main-canvas').unbind('dblclick');
      $('#main-canvas').unbind('mouseup');
      notes_layer = stage.getLayers()[1];
      notes_layer.remove();
      stage.draw();
      $('#main-canvas').mousedown(function(event) {
        var canvas_x, canvas_y;
        canvas_x = (event.clientX - $(this).offset().left) - stage.getAttr('x');
        canvas_y = (event.clientY - $(this).offset().top) - stage.getAttr('y');
        crop.setAttrs({
          x: canvas_x / stage.getAttr('scale').x,
          y: canvas_y / stage.getAttr('scale').y
        });
        layer.add(crop);
        return $(this).mousemove(function(event) {
          canvas_x = event.clientX - $(this).offset().left - stage.getAttr('x');
          canvas_y = event.clientY - $(this).offset().top - stage.getAttr('y');
          crop.setAttrs({
            width: (canvas_x - crop.getAttr('x') * stage.getAttr('scale').x) / stage.getAttr('scale').x,
            height: (canvas_y - crop.getAttr('y') * stage.getAttr('scale').y) / stage.getAttr('scale').y
          });
          stage.draw();
          return void 0;
        });
      });
      void 0;
      $('#main-canvas').mouseup(function(event) {
        var clipping;
        clipping = {
          x: Math.floor(crop.getAttr('x')) - (main.offsetWidth / min_scale - surrogate.width) / 2,
          y: Math.floor(crop.getAttr('y')) - (main.offsetHeight / min_scale - surrogate.height) / 2,
          width: Math.floor(crop.getAttr('width')),
          height: Math.floor(crop.getAttr('height'))
        };
        rect.setAttrs({
          x: crop.getAttr('x'),
          y: crop.getAttr('y'),
          width: crop.getAttr('width'),
          height: crop.getAttr('height')
        });
        $(current_note).find('.content_x').val(clipping.x);
        $(current_note).find('.content_y').val(clipping.y);
        $(current_note).find('.content_width').val(clipping.width);
        $(current_note).find('.content_height').val(clipping.height);
        $(this).unbind();
        $(this).on('dblclick', canvas_dblclick);
        $(this).on('mouseup', canvas_mouseup);
        stage.setAttr('draggable', true);
        stage.add(notes_layer);
        crop.destroy();
        stage.draw();
        return void 0;
      });
      return void 0;
    });
    $('#record_annotate h4').click(function() {
      var window;
      $(this).data('clicked', !$(this).data('clicked'));
      window = $(this).parent();
      if ($(this).data('clicked')) {
        return window.css('height', 'auto');
      } else {
        return window.css('height', 15);
      }
    });
    return void 0;
  };

  window.section = {};

  window.section.create = function(user_form) {
    $.getJSON('../users.json', function(users) {
      return d3.select(user_form.users_field).on('keyup', function() {
        var selected_users, ul, user_search;
        user_search = this.value.toLowerCase();
        d3.selectAll("li.user").remove();
        if (user_search.length > 0) {
          ul = d3.select(user_form.user_list);
          selected_users = users.filter(function(d) {
            return d.name.toLowerCase().indexOf(user_search) > -1;
          });
          ul = d3.select(user_form.user_list);
          ul.selectAll(".user").data(selected_users).enter().append('li').attr("class", "user").text(function(d) {
            return d.name;
          }).on('click', function() {
            var data, size;
            data = d3.select(this).data()[0];
            size = d3.select(user_form.user_target).selectAll('input').size();
            d3.select(user_form.user_target).append('div').attr("class", "selected_user").text(function() {
              return data.name;
            });
            d3.select(user_form.user_target).append('input').attr('type', 'hidden').attr("value", function() {
              return data.id;
            }).attr("readonly", true).attr('name', function() {
              return "users[" + parseInt(size) + "]";
            });
            d3.select(this).remove();
            users = users.filter(function(user) {
              return user.id !== data.id;
            });
            return void 0;
          });
        }
        return void 0;
      });
    });
    return void 0;
  };

  window.spotlights = {};

  window.spotlights.components = [];

  window.spotlights.create = function() {
    $("#type").change(function(e) {
      $(this).val('article');
      alert('not available yet!');
      return void 0;
    });
    $('#spotlight_body, #spotlight_title').val('');
    $('#new_spotlight').submit(function(e) {
      var array_params, object_params, p, _i, _len;
      e.preventDefault();
      array_params = $(this).serializeArray();
      array_params.push({
        name: 'spotlight[components]',
        value: JSON.stringify(window.spotlights.components)
      });
      object_params = {};
      for (_i = 0, _len = array_params.length; _i < _len; _i++) {
        p = array_params[_i];
        object_params[p.name] = p.value;
      }
      return $.ajax({
        type: "POST",
        url: '/spotlights',
        data: array_params,
        success: function(data) {
          return window.location = '/spotlights/' + data.id;
        },
        dataType: 'json',
        headers: {
          'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
        }
      });
    });
    return void 0;
  };

  window.spotlights.update = function(id) {
    $("#type").change(function(e) {
      $(this).val('article');
      alert('not available yet!');
      return void 0;
    });
    $.getJSON('/spotlights/' + id, function(data) {
      var component, i, _i, _len, _ref, _results;
      _ref = data.components;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        component = _ref[i];
        render_thumbnail(component, i);
        _results.push(window.spotlights.components.push(component));
      }
      return _results;
    });
    $('.edit_spotlight').submit(function(e) {
      var array_params, object_params, p, _i, _len;
      e.preventDefault();
      array_params = $(this).serializeArray();
      array_params.push({
        name: 'spotlight[components]',
        value: JSON.stringify(window.spotlights.components)
      });
      object_params = {};
      for (_i = 0, _len = array_params.length; _i < _len; _i++) {
        p = array_params[_i];
        object_params[p.name] = p.value;
      }
      return $.ajax({
        type: "PUT",
        url: '/spotlights/' + id,
        data: array_params,
        success: function(data) {
          return window.location = '/spotlights/' + id;
        },
        dataType: 'json',
        headers: {
          'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
        }
      });
    });
    return void 0;
  };

  window.spotlights.display_annotation = function(wrapper, content) {
    var context, image, layer, stage, x_fit, y_fit;
    context = $('#' + wrapper).attr('class') === 'user_annotation';
    x_fit = context ? $('#' + wrapper).width() / content.width : 1;
    y_fit = context ? $('#' + wrapper).height() / content.height : 1;
    stage = new Kinetic.Stage({
      container: wrapper,
      width: content.width,
      height: content.height,
      scale: {
        x: content.width > content.height ? y_fit : x_fit,
        y: content.width > content.height ? y_fit : x_fit
      }
    });
    layer = new Kinetic.Layer();
    stage.add(layer);
    image = new Image();
    image.src = content.image_url + "?width=10000&height=10000";
    image.onload = function() {
      var picture;
      picture = new Kinetic.Image({
        image: image,
        width: content.width,
        height: content.height,
        crop: {
          x: content.x,
          y: content.y,
          width: content.width,
          height: content.height
        }
      });
      layer.add(picture);
      return stage.draw();
    };
    return void 0;
  };

  render_thumbnail = function(data, i) {
    var content, frame, image, layer, stage, title;
    switch (data.type) {
      case 'record':
        frame = $("<div class='record_thumbnail surrogate'>").css('background-image', "url(" + data.image + "?width=200&height=200)");
        title = $('<h3>').append(i);
        frame.append(title);
        $('#spotlight_components').append(frame);
        break;
      case 'annotation':
        content = data.content;
        content.height = parseInt(content.height);
        content.width = parseInt(content.width);
        content.x = parseInt(content.x);
        content.y = parseInt(content.y);
        frame = $("<div class='record_annotation surrogate'>");
        stage = new Kinetic.Stage({
          container: frame[0],
          width: content.width > content.height ? 150 : content.width * 150 / content.height,
          height: content.width > content.height ? content.height * 150 / content.width : 150,
          x: 0,
          y: 0
        });
        layer = new Kinetic.Layer();
        image = new Image();
        image.src = content.image_url + "?width=10000&height=10000";
        image.onload = function() {
          var picture;
          picture = new Kinetic.Image({
            image: image,
            scale: {
              x: stage.getAttr('width') / image.width,
              y: stage.getAttr('height') / image.height
            },
            crop: {
              width: content.width,
              height: content.height,
              x: content.x,
              y: content.y
            }
          });
          layer.add(picture);
          return stage.add(layer);
        };
        title = $('<h3>').append(i);
        frame.append(title);
        $('#spotlight_components').append(frame);
        break;
      case 'visualization':
        frame = $("<div class='visualization_component'>");
        $(frame).append("<p>type:" + data.type + "</p>");
        $(frame).append("<p>property:" + data.body.terms.property + "</p>");
        $(frame).append("<p>include:" + data.body.terms.include + "</p>");
        $(frame).append("<p>exclude:" + data.body.terms.exclude + "</p>");
        title = $('<h3>').append(i);
        frame.append(title);
        $('#spotlight_components').append(frame);
        break;
      default:
        void 0;
    }
    return void 0;
  };

  window.trays = {};

  window.trays.add_visualization = function(user) {
    $('#add_visualization_to_tray').submit(function(e) {
      var add_viz, data, option;
      add_viz = this;
      e.preventDefault();
      option = $(add_viz).find('select[name=tray]').val();
      data = {};
      data.terms = window.collection.query;
      data.url = window.location.href;
      if (option === 'new_tray') {
        return $.ajax({
          type: "POST",
          url: "http://" + window.location.host + "/users/" + user + "/trays/",
          data: {
            tray: {
              owner_id: user,
              owner_type: 'User',
              visualizations: JSON.stringify([data]),
              name: $(add_viz).find("input[name=new_tray]").val()
            }
          },
          success: function(data) {
            return alert('success: tray ' + $(add_viz).find("input[name=new_tray]").val() + ' created and visualization added');
          },
          dataType: 'json',
          headers: {
            'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
          }
        });
      } else {
        return $.ajax({
          type: "GET",
          url: '/trays/' + option + '/add_visualization/',
          data: {
            viz_data: data
          },
          success: function(data) {
            return alert('success: visualization added to ' + $(add_viz).find("input[name=new_tray]").val());
          },
          dataType: 'json',
          headers: {
            'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
          }
        });
      }
    });
    return void 0;
  };

  window.trays.add_records = function(user) {
    $("select[name=tray]").change(function(e) {
      if ($(this).val() === 'new_tray') {
        return $(this).parent().find("input[name=new_tray]").show();
      } else {
        return $(this).parent().find("input[name=new_tray]").hide();
      }
    });
    return $('#add_records_to_tray').submit(function(e) {
      var add_record, option, type_placeholder;
      e.preventDefault();
      add_record = this;
      option = $(add_record).find('select[name=tray]').val();
      type_placeholder = window.collection.query.type;
      window.collection.query.type = 'list_records';
      $.getJSON(window.location.pathname + window.collection.query_terms(), function(data) {
        if (option === 'new_tray') {
          $.ajax({
            type: "POST",
            url: "http://" + window.location.host + "/users/" + user + "/trays/",
            data: {
              tray: {
                owner_id: user,
                owner_type: 'User',
                records: data,
                visualizations: JSON.stringify([]),
                name: $(add_record).find("input[name=new_tray]").val()
              }
            },
            success: function(data) {
              return alert('success: tray ' + $(add_record).find("input[name=new_tray]").val() + ' created and records added');
            },
            dataType: 'json',
            headers: {
              'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
            }
          });
        } else {
          $.ajax({
            type: "GET",
            url: "/trays/" + option + "/add_records/",
            data: {
              records: data
            },
            success: function(data) {
              return alert("success: records added to tray");
            },
            dataType: 'json',
            headers: {
              'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
            }
          });
        }
        return window.collection.query.type = type_placeholder;
      });
      return void 0;
    });
  };

  window.trays.add_record = function(data, user) {
    if (user == null) {
      user = -1;
    }
    $("select[name=tray]").change(function() {
      if ($(this).val() === 'new_tray') {
        return $("input[name=new_tray]").show();
      } else {
        return $("input[name=new_tray]").hide();
      }
    });
    $('#add_record_to_tray').submit(function(e) {
      var option;
      e.preventDefault();
      option = $('select[name=tray]').val();
      if (option === 'new_tray') {
        return $.ajax({
          type: "POST",
          url: "http://" + window.location.host + "/users/" + user + "/trays/",
          data: {
            tray: {
              owner_id: user,
              owner_type: 'User',
              records: data,
              visualizations: JSON.stringify([]),
              name: $("input[name=new_tray]").val()
            }
          },
          success: function(data) {
            return alert('success: tray ' + $("input[name=new_tray]").val() + ' created and records added');
          },
          dataType: 'json',
          headers: {
            'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
          }
        });
      } else {
        return $.ajax({
          type: "GET",
          url: "/trays/" + option + "/add_records/",
          data: {
            records: data
          },
          success: function() {
            return alert('success: records added to ' + $("input[name=new_tray]").val());
          },
          dataType: 'json',
          headers: {
            'X-CSRF-Token': $("meta[name='csrf-token']").attr('content')
          }
        });
      }
    });
    return void 0;
  };

  window.trays.show = function() {
    $('.user_tray .visualization_preview').dblclick(function(e) {
      var c_frame, current_body, d, index;
      d = $(this).data();
      window.spotlights.components.push(d);
      $(this).remove();
      current_body = $('#spotlight_body').val();
      $('#spotlight_body').val(current_body + ("{" + (window.spotlights.components.indexOf(d)) + "}"));
      document.getElementsByTagName('iframe')[0].contentWindow.document.body.innerHTML += "{" + (window.spotlights.components.indexOf(d)) + "}";
      index = $("<h3>").append(window.spotlights.components.indexOf(d));
      c_frame = $(this).clone().append(index);
      $('#spotlight_components').append(c_frame);
      return void 0;
    });
    $('.user_tray>h3').click(function(e) {
      e.preventDefault();
      $('#user_trays .user_tray').not($(this).parent()).hide();
      $(this).parent().find('*').show();
      $('.user_tray .surrogate').remove();
      $('.user_tray .tray_record_images').remove();
      $('.user_tray .tray_record_annotations').remove();
      return $('#trays_title').click(function(e) {
        $('.user_tray').show();
        $('.user_tray .record_thumbnail, .visualization_preview').hide();
        $('.user_tray .surrogate').remove();
        $('.user_tray h4').remove();
        return void 0;
      });
    });
    $('.user_tray .record_thumbnail').click(function(e) {
      var host_tray, location;
      e.preventDefault();
      host_tray = $(this).parent();
      location = $(this).attr('href');
      host_tray.find('.record_thumbnail, .visualization_preview').hide();
      return $.getJSON(location, function(data) {
        var annotation, image, images_div, notes_div, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1;
        images_div = $("<div class='tray_record_images'>");
        host_tray.append(images_div);
        images_div.append('<h4>Surrogates</h4>');
        notes_div = $("<div class='tray_record_annotations'>");
        host_tray.append(notes_div);
        notes_div.append('<h4>Annotations</h4>');
        _ref = data.parsed.image;
        _fn = function(image) {
          var frame, title;
          frame = $("<div class='record_thumbnail surrogate'>").css('background-image', "url(" + image + "?width=200&height=200)");
          frame.data('id', data.parsed.curarium[0]);
          frame.data('surrogate', data.parsed.image.indexOf(image));
          frame.data('image', image);
          frame.data('title', data.parsed.title[0]);
          frame.data('type', 'record');
          title = $('<h3>').append(data.parsed.image.indexOf(image));
          frame.append(title);
          images_div.append(frame);
          return $(frame).dblclick(function(e) {
            var c_frame, c_title, current_body, d;
            d = $(this).data();
            window.spotlights.components.push(d);
            $(this).remove();
            current_body = $('#spotlight_body').val();
            $('#spotlight_body').val(current_body + ("{" + (window.spotlights.components.indexOf(d)) + "}"));
            document.getElementsByTagName('iframe')[0].contentWindow.document.body.innerHTML += "{" + (window.spotlights.components.indexOf(d)) + "}";
            c_frame = $("<a class='record_thumbnail component'>").css('background-image', "url(" + d.image + "?width=200&height=200)");
            c_title = $('<h3>').append(window.spotlights.components.indexOf(d));
            c_frame.append(c_title);
            $('#spotlight_components').append(c_frame);
            return $('.wysihtml5-editor').append(c_frame);
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          image = _ref[_i];
          _fn(image);
        }
        _ref1 = data.annotations;
        _fn1 = function(annotation) {
          var content, frame, layer, stage, title;
          content = annotation.content;
          content.height = parseInt(content.height);
          content.width = parseInt(content.width);
          content.x = parseInt(content.x);
          content.y = parseInt(content.y);
          frame = $("<div class='record_annotation surrogate'>");
          frame.data('id', data.parsed.curarium[0]);
          frame.data('surrogate', data.parsed.image.indexOf(image));
          frame.data('image', content.image_url);
          frame.data('title', content.title);
          frame.data('content', content);
          frame.data('type', 'annotation');
          stage = new Kinetic.Stage({
            container: frame[0],
            width: content.width > content.height ? 150 : content.width * 150 / content.height,
            height: content.width > content.height ? content.height * 150 / content.width : 150,
            x: 0,
            y: 0
          });
          layer = new Kinetic.Layer();
          image = new Image();
          image.src = content.image_url + "?width=10000&height=10000";
          image.onload = function() {
            var picture;
            picture = new Kinetic.Image({
              image: image,
              scale: {
                x: stage.getAttr('width') / image.width,
                y: stage.getAttr('height') / image.height
              },
              crop: {
                width: content.width,
                height: content.height,
                x: content.x,
                y: content.y
              }
            });
            layer.add(picture);
            return stage.add(layer);
          };
          title = $('<h3>').append(annotation.content.title);
          frame.append(title);
          notes_div.append(frame);
          return $(frame).dblclick(function(e) {
            var c_frame, c_title, current_body, d;
            d = $(this).data();
            window.spotlights.components.push(d);
            $(this).remove();
            current_body = $('#spotlight_body').val();
            $('#spotlight_body').val(current_body + ("{" + (window.spotlights.components.indexOf(d)) + "}"));
            document.getElementsByTagName('iframe')[0].contentWindow.document.body.innerHTML += "{" + (window.spotlights.components.indexOf(d)) + "}";
            c_frame = $("<a class='record_thumbnail component'>").css('background-image', "url(" + d.image + "?width=200&height=200)");
            c_title = $('<h3>').append(window.spotlights.components.indexOf(d));
            c_frame.append(c_title);
            $('#spotlight_components').append(c_frame);
            return $('.wysihtml5-editor').append(c_frame);
          });
        };
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          annotation = _ref1[_j];
          _fn1(annotation);
        }
        return void 0;
      });
    });
    return void 0;
  };

  window.visualization = {};

  window.visualization.populate_query_menu = function() {
    var in_ex, term, value, _i, _j, _len, _len1, _ref, _ref1;
    in_ex = 'include';
    $('#visualization_include').empty();
    _ref = window.collection.query.include;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      value = _ref[_i];
      term = $("<span class='visualization_" + in_ex + "d'><span class='remove_element'>x</span><input value='" + value + "' name='" + in_ex + "[]' readonly></span>");
      term.find('span').click(function(e) {
        return $(this).parent().remove();
      });
      $('#visualization_include').append(term);
    }
    in_ex = 'exclude';
    $('#visualization_exclude').empty();
    _ref1 = window.collection.query.exclude;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      value = _ref1[_j];
      term = $("<span class='visualization_" + in_ex + "d'><span class='remove_element'>x</span><input value='" + value + "' name='" + in_ex + "[]' readonly></span>");
      term.find('span').click(function(e) {
        return $(this).parent().remove();
      });
      $('#visualization_exclude').append(term);
    }
    return void 0;
  };

  window.visualization.thumbnail = function(container, source) {
    $('#' + container).spatialc({
      url: source
    });

    /*
    $('[data-sort-field]').click(function() {
          $('#spatialc-container').spatialc({
              'sort_by': $(this).attr('data-sort-field'),
              'sort_name': $(this).attr('data-sort-field-name')
          })
      })
    
      $('[data-sort-order]').click(function() {
          $('#spatialc-container').spatialc({
              'sort_order': $(this).attr('data-sort-order'),
              'sort_name': $(this).attr('data-sort-order-name')
          })
      })
     */
    return void 0;
  };

  window.visualization.treemap = function(container, source) {
    var click, selected, tree;
    selected = [];
    $.getJSON(source, function(items) {
      tree({
        children: items.records
      });
      window.collection.query.length = items.length;
      return void 0;
    });
    tree = function(root) {
      var color, div, height, margin, max_value, n, node, position, treemap, width, _fn, _i, _len, _ref;
      d3.selectAll('#' + container + ' *').remove();
      max_value = 0;
      _ref = root.children;
      _fn = function(n) {
        if (max_value < n.id) {
          return max_value = n.id;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        _fn(n);
      }
      margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      width = $('#' + container).width() - margin.left - margin.right;
      height = $('#' + container).height() - margin.top - margin.bottom;
      color = d3.scale.linear().domain([0, max_value / 8, max_value / 4, max_value / 2, max_value]).range(['#c83737', '#ff9955', '#5aa02c', '#2a7fff']);
      treemap = d3.layout.treemap().size([width, height]).value(function(d) {
        if (selected.indexOf(d.parsed) < 0) {
          return d.id;
        } else {
          return null;
        }
      });
      div = d3.select('#' + container).style('overflow', 'hidden').append("div").attr('id', 'chart-container').style("position", "relative").style("width", (width + margin.left + margin.right) + "px").style("height", (height + margin.top + margin.bottom) + "px").style("left", margin.left + "px").style("top", margin.top + "px");
      position = function() {
        this.style("left", function(d) {
          return d.x + "px";
        }).style("top", function(d) {
          return d.y + "px";
        }).style("width", function(d) {
          return Math.max(0, d.dx - 1) + "px";
        }).style("height", function(d) {
          return Math.max(0, d.dy - 1) + "px";
        });
        return void 0;
      };
      node = div.datum(root).selectAll(".node").data(treemap.nodes).enter().append("a").attr("href", "#").attr("class", "node").call(position).style("background", function(d) {
        if (d.id != null) {
          return color(d.id);
        }
      }).text(function(d) {
        if (d.parsed !== void 0) {
          return d.parsed + '(' + d.id + ')';
        } else {
          return '';
        }
      });
      return void 0;
    };
    
    return void 0;
  };

  window.visualization.quick_search = function(container, source) {
    window.visualization.thumbnail(container, source);
    return void 0;
  };

  window.visualization.old_thumbnail = function(container, source) {
    var thumbs;
    $.getJSON(source, function(items) {
      thumbs(items);
      window.collection.query.length = items.length;
      return void 0;
    });
    thumbs = function(items) {
      d3.select("#" + container).selectAll('div').data(items).enter().append('div').attr('class', 'record_thumbnail').attr('title', function(d) {
        return d.id + ":" + d['title'].toString();
      }).style('background-image', function(d) {
        var image_url;
        if (d.thumbnail) {
          image_url = d.thumbnail;
          return 'url(' + image_url + '?width=150&height=150)';
        }
      }).on('click', function(e) {
        var id;
        id = d3.select(this).data()[0].id;
        return window.open('http://' + window.location.host + '/records/' + id, '_blank');
      });
      return void 0;
    };
    return void 0;
  };

  window.visualization.treemap_embedded = function(container, source) {
    var selected, tree;
    console.log("woiks");
    selected = [];
    $.getJSON(source, function(items) {
      tree(items.treemap);
      return void 0;
    });
    tree = function(root) {
      var color, div, height, margin, max_value, n, node, position, treemap, width, _fn, _i, _len, _ref;
      d3.selectAll('#' + container + ' *').remove();
      max_value = 0;
      _ref = root.children;
      _fn = function(n) {
        if (max_value < n.size) {
          return max_value = n.size;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        _fn(n);
      }
      margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      width = $('#' + container).width() - margin.left - margin.right;
      height = $('#' + container).height() - margin.top - margin.bottom;
      color = d3.scale.linear().domain([0, max_value / 8, max_value / 4, max_value / 2, max_value]).range(['#c83737', '#ff9955', '#5aa02c', '#2a7fff']);
      treemap = d3.layout.treemap().size([width, height]).value(function(d) {
        if (selected.indexOf(d.name) < 0) {
          return d.size;
        } else {
          return null;
        }
      });
      div = d3.select('#' + container).append("div").attr('id', 'chart-container').style("position", "relative").style("width", (width + margin.left + margin.right) + "px").style("height", (height + margin.top + margin.bottom) + "px").style("left", margin.left + "px").style("top", margin.top + "px");
      position = function() {
        this.style("left", function(d) {
          return d.x + "px";
        }).style("top", function(d) {
          return d.y + "px";
        }).style("width", function(d) {
          return Math.max(0, d.dx - 1) + "px";
        }).style("height", function(d) {
          return Math.max(0, d.dy - 1) + "px";
        });
        return void 0;
      };
      node = div.datum(root).selectAll(".node").data(treemap.nodes).enter().append("a").attr("href", "#").attr("class", "node").call(position).style("background", function(d) {
        if (d.size != null) {
          return color(d.size);
        }
      }).text(function(d) {
        return d.name + '(' + d.size + ')';
      });
      return void 0;
    };
    return void 0;
  };

  window.visualization.thumbnail_embedded = function(container, source) {
    var thumbs;
    $.getJSON(source, function(items) {
      thumbs(items);
      return void 0;
    });
    thumbs = function(items) {
      d3.select("#" + container).selectAll('div').data(items).enter().append('div').attr('class', 'record_thumbnail').attr('title', function(d) {
        return d.id + ":" + d['title'].toString();
      }).style('background-image', function(d) {
        var image_url;
        if (d.thumbnail) {
          image_url = d.thumbnail;
          return 'url(' + image_url + '?width=150&height=150)';
        }
      });
      return void 0;
    };
    return void 0;
  };

}).call(this);
